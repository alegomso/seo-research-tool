import { z } from 'zod';
declare const envSchema: z.ZodObject<{
    NODE_ENV: z.ZodDefault<z.ZodEnum<["development", "production", "test"]>>;
    PORT: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    HOST: z.ZodDefault<z.ZodString>;
    DATABASE_URL: z.ZodString;
    REDIS_URL: z.ZodString;
    JWT_SECRET: z.ZodString;
    NEXTAUTH_SECRET: z.ZodString;
    NEXTAUTH_URL: z.ZodDefault<z.ZodString>;
    GOOGLE_CLIENT_ID: z.ZodOptional<z.ZodString>;
    GOOGLE_CLIENT_SECRET: z.ZodOptional<z.ZodString>;
    DATAFORSEO_LOGIN: z.ZodString;
    DATAFORSEO_PASSWORD: z.ZodString;
    DATAFORSEO_BASE_URL: z.ZodDefault<z.ZodString>;
    OPENAI_API_KEY: z.ZodString;
    OPENAI_ORGANIZATION: z.ZodOptional<z.ZodString>;
    RATE_LIMIT_MAX: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    RATE_LIMIT_WINDOW: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    API_BASE_URL: z.ZodDefault<z.ZodString>;
    WEB_BASE_URL: z.ZodDefault<z.ZodString>;
    CACHE_TTL_SERP: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    CACHE_TTL_KEYWORDS: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    CACHE_TTL_BACKLINKS: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    WORKER_POLL_INTERVAL: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    WORKER_MAX_RETRIES: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    LOG_LEVEL: z.ZodDefault<z.ZodEnum<["error", "warn", "info", "debug"]>>;
    LOG_FORMAT: z.ZodDefault<z.ZodEnum<["json", "dev"]>>;
}, "strip", z.ZodTypeAny, {
    NODE_ENV: "development" | "production" | "test";
    PORT: number;
    HOST: string;
    DATABASE_URL: string;
    REDIS_URL: string;
    JWT_SECRET: string;
    NEXTAUTH_SECRET: string;
    NEXTAUTH_URL: string;
    DATAFORSEO_LOGIN: string;
    DATAFORSEO_PASSWORD: string;
    DATAFORSEO_BASE_URL: string;
    OPENAI_API_KEY: string;
    RATE_LIMIT_MAX: number;
    RATE_LIMIT_WINDOW: number;
    API_BASE_URL: string;
    WEB_BASE_URL: string;
    CACHE_TTL_SERP: number;
    CACHE_TTL_KEYWORDS: number;
    CACHE_TTL_BACKLINKS: number;
    WORKER_POLL_INTERVAL: number;
    WORKER_MAX_RETRIES: number;
    LOG_LEVEL: "error" | "warn" | "info" | "debug";
    LOG_FORMAT: "json" | "dev";
    GOOGLE_CLIENT_ID?: string | undefined;
    GOOGLE_CLIENT_SECRET?: string | undefined;
    OPENAI_ORGANIZATION?: string | undefined;
}, {
    DATABASE_URL: string;
    REDIS_URL: string;
    JWT_SECRET: string;
    NEXTAUTH_SECRET: string;
    DATAFORSEO_LOGIN: string;
    DATAFORSEO_PASSWORD: string;
    OPENAI_API_KEY: string;
    NODE_ENV?: "development" | "production" | "test" | undefined;
    PORT?: string | undefined;
    HOST?: string | undefined;
    NEXTAUTH_URL?: string | undefined;
    GOOGLE_CLIENT_ID?: string | undefined;
    GOOGLE_CLIENT_SECRET?: string | undefined;
    DATAFORSEO_BASE_URL?: string | undefined;
    OPENAI_ORGANIZATION?: string | undefined;
    RATE_LIMIT_MAX?: string | undefined;
    RATE_LIMIT_WINDOW?: string | undefined;
    API_BASE_URL?: string | undefined;
    WEB_BASE_URL?: string | undefined;
    CACHE_TTL_SERP?: string | undefined;
    CACHE_TTL_KEYWORDS?: string | undefined;
    CACHE_TTL_BACKLINKS?: string | undefined;
    WORKER_POLL_INTERVAL?: string | undefined;
    WORKER_MAX_RETRIES?: string | undefined;
    LOG_LEVEL?: "error" | "warn" | "info" | "debug" | undefined;
    LOG_FORMAT?: "json" | "dev" | undefined;
}>;
export type EnvConfig = z.infer<typeof envSchema>;
export declare function getEnvConfig(): EnvConfig;
export default getEnvConfig;
//# sourceMappingURL=env.d.ts.map